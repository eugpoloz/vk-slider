{"version":3,"sources":["helpers/index.tsx","components/Slider/Slider.tsx","components/Slider/index.tsx","components/RangeSlider/RangeSlider.tsx","components/RangeSlider/index.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["STEP_INCREMENT","getClientXFromEvent","$event","$touchEvent","$mouseEvent","touches","clientX","validateAbsolutePosition","position","sliderWidth","min","max","step","validPosition","Math","absStep","round","getPercentFromAbsolutePosition","clampValue","value","number","precision","factor","pow","precisionRound","split","length","percentToValue","percent","valueToPercent","Slider","onChange","props","sliderRef","React","useRef","knobRef","useState","updateSliderWidth","sliderOffsetX","updateSliderOffsetX","updateSliderDimensions","useCallback","sliderDimensions","current","getBoundingClientRect","width","x","debounceUpdateSliderDimensions","debounce","useEffect","window","addEventListener","removeEventListener","initialValue","defaultValue","determineInitialValue","initialPercent","setValue","setPercent","active","toggleActive","updateSliderPosition","helperProps","percentPosition","validatePercent","preventDefaultAndStopPropagation","changedTouches","preventDefault","stopPropagation","handleDragMove","handleDragStart","focus","document","handleDragEnd","blur","setTimeout","ref","className","disabled","onMouseDown","undefined","onTouchStart","style","type","tabIndex","role","aria-labelledby","ariaLabelledBy","aria-orientation","aria-valuemax","aria-valuemin","aria-valuenow","onKeyDown","newValue","key","updatedIncrementedValue","updatedDecrementedValue","left","RangeSlider","knobStartRef","knobEndRef","getPercentFromValue","initialTargetRef","getPercentPosition","newStartValue","newEndValue","updatedStartValue","updatedEndValue","target","handleKeyDown","App","simpleValue","updateSimpleValue","controlledValue","updateControlledValue","rangeValue","updateRangeValue","href","rel","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.191547da.chunk.js","sourcesContent":["export const DEBOUNCE_EVENT_TIMEOUT: number = 300;\nexport const STEP_INCREMENT: number = 10;\n\nexport function getClientXFromEvent($event: React.TouchEvent<HTMLElement> | React.MouseEvent<HTMLElement>) {\n    let $touchEvent = ($event as React.TouchEvent<HTMLElement>);\n    let $mouseEvent = ($event as React.MouseEvent<HTMLElement>);\n\n    if ($touchEvent?.touches?.[0]?.clientX) {\n        return $touchEvent.touches[0].clientX;\n    }\n\n    if ($mouseEvent?.clientX) {\n        return $mouseEvent.clientX;\n    }\n\n    return undefined;\n}\n\nexport type SliderHelperProps = {\n    min: number,\n    max: number,\n    step: number,\n    sliderWidth: number\n}\nexport function validateAbsolutePosition(position: number, { sliderWidth, min, max, step }: SliderHelperProps) {\n    let validPosition = Math.max(0, Math.min(position, sliderWidth));\n\n    if (step > 0) {\n        const stepCount = (max - min) / step;\n        const absStep = sliderWidth / stepCount;\n\n        validPosition = Math.round(validPosition / absStep) * absStep;\n    }\n\n    return validPosition;\n}\n\nexport function validatePercent(percent: number): number {\n    return Math.max(0, Math.min(percent, 100));\n}\n\nexport function getPercentFromAbsolutePosition(position: number, sliderWidth: number) {\n    return position * 100 / sliderWidth;\n}\n\nfunction precisionRound(number: number, precision: number) {\n    let factor = Math.pow(10, precision || 1);\n    return Math.round(number * factor) / factor;\n}\n\nexport function clampValue(value: number, step: number) {\n    if (step > 0) {\n        const stepFloatPart = `${step}`.split('.')[1] || '';\n        return precisionRound(value, stepFloatPart.length);\n    }\n\n    return value;\n}\n\ntype PercentToValueProps = { min: number, max: number, step: number };\nexport function percentToValue(percent: number, { min, max, step }: PercentToValueProps) {\n    const value = percent * (max - min) / 100 + min;\n\n    return clampValue(value, step);\n}\n\ntype ValueToPercentProps = { min: number, max: number };\nexport function valueToPercent(value: number, { min, max }: ValueToPercentProps) {\n    return (value - min) * 100 / (max - min);\n}","import React from \"react\";\nimport { getClientXFromEvent, getPercentFromAbsolutePosition, valueToPercent, validateAbsolutePosition, validatePercent, percentToValue, clampValue, DEBOUNCE_EVENT_TIMEOUT, STEP_INCREMENT } from \"../../helpers\";\nimport debounce from 'lodash.debounce';\n\ntype SliderDragEvent = React.TouchEvent<HTMLElement> | React.MouseEvent<HTMLElement>;\n\ntype SliderProps = {\n    min: number,\n    max: number,\n    step?: number,\n    value?: number,\n    defaultValue?: number,\n    onChange?: Function,\n    disabled?: boolean,\n    ariaLabelledBy?: string\n};\n\nfunction Slider({ min = 0, max = 100, step = 0.01, onChange, ...props }: SliderProps) {\n    // get refs\n    const sliderRef = React.useRef<HTMLDivElement>(null);\n    const knobRef = React.useRef<HTMLSpanElement>(null);\n\n    // measure slider\n    const [sliderWidth, updateSliderWidth] = React.useState<number>(0);\n    const [sliderOffsetX, updateSliderOffsetX] = React.useState<number>(0);\n\n    const updateSliderDimensions = React.useCallback(() => {\n        let sliderDimensions = sliderRef?.current?.getBoundingClientRect();\n\n        if (sliderDimensions) {\n            updateSliderWidth(sliderDimensions.width);\n            updateSliderOffsetX(sliderDimensions.x);\n        }\n    }, []);\n    const debounceUpdateSliderDimensions = debounce(updateSliderDimensions, DEBOUNCE_EVENT_TIMEOUT);\n\n    React.useEffect(() => {\n        updateSliderDimensions();\n\n        window.addEventListener('resize', debounceUpdateSliderDimensions);\n\n        return () => {\n            window.removeEventListener('resize', debounceUpdateSliderDimensions);\n        }\n    }, [updateSliderDimensions, debounceUpdateSliderDimensions]);\n\n    // set values and percentages\n    const determineInitialValue = () => {\n        let initialValue = 0;\n\n        if (props.value) {\n            initialValue = props.value;\n        } else if (props.defaultValue) {\n            initialValue = props.defaultValue;\n        }\n\n        return initialValue;\n    }\n    const initialValue = determineInitialValue();\n    const initialPercent = valueToPercent(initialValue, { min, max });\n\n    const [value, setValue] = React.useState<number>(initialValue);\n    const [percent, setPercent] = React.useState<number>(initialPercent);\n    const [active, toggleActive] = React.useState<boolean>(false);\n\n    // handle onChange event on value changes\n    React.useEffect(() => {\n        if (!!onChange) {\n            onChange(value);\n        }\n    }, [value, onChange]);\n\n    // get and update slider position\n    const updateSliderPosition = React.useCallback(($event: SliderDragEvent) => {\n        const clientX = getClientXFromEvent($event);\n\n        if (clientX != null) {\n            let helperProps = {\n                sliderWidth, min, max, step\n            };\n\n            const absolutePosition = clientX - sliderOffsetX;\n            const validAbsolutePosition = validateAbsolutePosition(absolutePosition, helperProps);\n            const percentPosition = getPercentFromAbsolutePosition(validAbsolutePosition, sliderWidth);\n\n            setPercent(validatePercent(percentPosition));\n            setValue(percentToValue(percentPosition, helperProps));\n        }\n    }, [max, min, sliderOffsetX, sliderWidth, step]);\n\n    const preventDefaultAndStopPropagation = React.useCallback(($event: any) => {\n        if (($event as React.TouchEvent<HTMLElement>).changedTouches?.length > 1) {\n            $event.preventDefault();\n        }\n\n        $event.stopPropagation();\n    }, []);\n\n    // handle events\n    const handleDragMove = React.useCallback(($event) => {\n        preventDefaultAndStopPropagation($event);\n        updateSliderPosition($event);\n    }, [updateSliderPosition, preventDefaultAndStopPropagation]);\n\n    const handleDragStart = ($event: SliderDragEvent) => {\n        preventDefaultAndStopPropagation($event);\n\n        knobRef.current?.focus();\n        toggleActive(true);\n        updateSliderPosition($event);\n\n        document.addEventListener('mousemove', handleDragMove, false);\n        document.addEventListener('touchmove', handleDragMove, false);\n\n        document.addEventListener('mouseup', handleDragEnd, false);\n        document.addEventListener('touchend', handleDragEnd, false);\n    }\n\n    const handleDragEnd = React.useCallback(($event) => {\n        preventDefaultAndStopPropagation($event);\n        updateSliderPosition($event);\n        toggleActive(false);\n        knobRef.current?.blur();\n\n        document.removeEventListener('mousemove', handleDragMove, false);\n        document.removeEventListener('touchmove', handleDragMove, false);\n\n        setTimeout(() => {\n            document.removeEventListener('mouseup', handleDragEnd, false);\n            document.removeEventListener('touchend', handleDragEnd, false);\n        }, 0)\n    }, [updateSliderPosition, preventDefaultAndStopPropagation, handleDragMove]);\n\n    const handleKeyDown: React.KeyboardEventHandler = ($event: React.KeyboardEvent<HTMLSpanElement>) => {\n        preventDefaultAndStopPropagation($event);\n\n        let newValue = value;\n\n        switch ($event.key) {\n            case 'Home':\n                newValue = min;\n                break;\n            case 'End':\n                newValue = max;\n                break;\n            case 'PageUp':\n                let updatedIncrementedValue = value + step * STEP_INCREMENT;\n\n                if (updatedIncrementedValue < max) {\n                    newValue = updatedIncrementedValue;\n                } else {\n                    newValue = max;\n                }\n                break;\n            case 'ArrowUp':\n            case 'ArrowRight':\n                if (value < max) {\n                    newValue = value + step;\n                }\n                break;\n            case 'PageDown':\n                let updatedDecrementedValue = value - step * STEP_INCREMENT;\n\n                if (updatedDecrementedValue > min) {\n                    newValue = updatedDecrementedValue;\n                } else {\n                    newValue = min;\n                }\n                break;\n            case 'ArrowDown':\n            case 'ArrowLeft':\n                if (value > min) {\n                    newValue = value - step;\n                }\n                break;\n            default:\n                break;\n        }\n\n        setValue(clampValue(newValue, step));\n        setPercent(valueToPercent(newValue, { min, max }));\n    }\n\n    // clean up event listeners on component destroy (= componentWillUnmount)\n    React.useEffect(() => {\n        return () => {\n            document.removeEventListener('mousemove', handleDragMove, false);\n            document.removeEventListener('touchmove', handleDragMove, false);\n\n            document.removeEventListener('mouseup', handleDragEnd, false);\n            document.removeEventListener('touchend', handleDragEnd, false);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return (\n        <div\n            ref={sliderRef}\n            className={(props && props.disabled) ? \"slider disabled\" : \"slider\"}\n            onMouseDown={!(props && props.disabled) ? handleDragStart : undefined}\n            onTouchStart={!(props && props.disabled) ? handleDragStart : undefined}>\n            <span className=\"slider__rail\" />\n            <span\n                className=\"slider__track\"\n                style={{\n                    width: percent + '%'\n                }}\n            />\n            <input\n                type=\"hidden\"\n                disabled={props && props.disabled}\n                value={value}\n            />\n            <span\n                ref={knobRef}\n                tabIndex={props && props.disabled ? undefined : 0}\n                role=\"slider\"\n                aria-labelledby={props && props.ariaLabelledBy}\n                aria-orientation=\"horizontal\"\n                aria-valuemax={max}\n                aria-valuemin={min}\n                aria-valuenow={value}\n                onKeyDown={handleKeyDown}\n                style={{\n                    left: percent + '%'\n                }}\n                className={active ? 'slider__knob active' : 'slider__knob'}\n            />\n        </div>\n    );\n}\n\nexport default Slider;\n","import Slider from './Slider';\n\nexport default Slider;","import React from \"react\";\nimport { getClientXFromEvent, getPercentFromAbsolutePosition, valueToPercent, validateAbsolutePosition, percentToValue, clampValue, SliderHelperProps, DEBOUNCE_EVENT_TIMEOUT, STEP_INCREMENT } from \"../../helpers\";\nimport debounce from 'lodash.debounce';\n\ntype SliderDragEvent = React.TouchEvent<HTMLElement> | React.MouseEvent<HTMLElement>;\n\ntype RangeSliderProps = {\n    min: number,\n    max: number,\n    step?: number,\n    value?: number[],\n    onChange?: Function,\n    disabled?: boolean,\n    ariaLabelledBy?: string\n};\n\nfunction RangeSlider({ min = 0, max = 100, step = 0.01, onChange, ...props }: RangeSliderProps) {\n    // get refs\n    const sliderRef = React.useRef<HTMLDivElement>(null);\n    const knobStartRef = React.useRef<HTMLSpanElement>(null);\n    const knobEndRef = React.useRef<HTMLSpanElement>(null);\n\n    // measure slider\n    const [sliderWidth, updateSliderWidth] = React.useState<number>(0);\n    const [sliderOffsetX, updateSliderOffsetX] = React.useState<number>(0);\n\n    const updateSliderDimensions = React.useCallback(() => {\n        let sliderDimensions = sliderRef?.current?.getBoundingClientRect();\n\n        if (sliderDimensions) {\n            updateSliderWidth(sliderDimensions.width);\n            updateSliderOffsetX(sliderDimensions.x);\n        }\n    }, []);\n    const debounceUpdateSliderDimensions = debounce(updateSliderDimensions, DEBOUNCE_EVENT_TIMEOUT);\n\n    React.useEffect(() => {\n        updateSliderDimensions();\n\n        window.addEventListener('resize', debounceUpdateSliderDimensions);\n\n        return () => {\n            window.removeEventListener('resize', debounceUpdateSliderDimensions);\n        }\n    }, [updateSliderDimensions, debounceUpdateSliderDimensions]);\n\n    // set values and percentages\n    const [value, setValue] = React.useState(props?.value ? props.value : [min, max]);\n    const getPercentFromValue = (value: number) => valueToPercent(value, { min, max });\n\n    // handle onChange event on value changes\n    React.useEffect(() => {\n        if (!!onChange) {\n            onChange(value);\n        }\n    }, [value, onChange]);\n\n    // get and update slider position\n    const initialTargetRef = React.useRef<HTMLSpanElement | null>(null);\n\n    const getPercentPosition = React.useCallback((clientX: number, helperProps: SliderHelperProps) => {\n        const absoluteX = validateAbsolutePosition(clientX - sliderOffsetX, helperProps);\n        const percentX = getPercentFromAbsolutePosition(absoluteX, sliderWidth);\n\n        return percentX;\n    }, [sliderOffsetX, sliderWidth]);\n\n    const updateSliderPosition = React.useCallback(($event: SliderDragEvent) => {\n        const clientX = getClientXFromEvent($event);\n\n        if (clientX != null) {\n            let helperProps = {\n                sliderWidth, min, max, step\n            };\n\n            let [newStartValue, newEndValue] = value;\n\n            const percentPosition = getPercentPosition(clientX, helperProps);\n\n            if (initialTargetRef.current === knobStartRef.current) {\n                const updatedStartValue = percentToValue(percentPosition, helperProps);\n\n                if (updatedStartValue < value[1]) {\n                    newStartValue = updatedStartValue;\n                } else {\n                    newStartValue = value[1] - step;\n                }\n            } else if (initialTargetRef.current === knobEndRef.current) {\n                const updatedEndValue = percentToValue(percentPosition, helperProps);\n\n                if (updatedEndValue > value[0]) {\n                    newEndValue = updatedEndValue;\n                } else {\n                    newEndValue = value[0] + step;\n                }\n            }\n\n            setValue([clampValue(newStartValue, step), clampValue(newEndValue, step)]);\n        }\n    }, [max, min, step, sliderWidth, value, getPercentPosition]);\n\n    const preventDefaultAndStopPropagation = React.useCallback(($event: any) => {\n        if (($event as React.TouchEvent<HTMLElement>).changedTouches?.length > 1) {\n            $event.preventDefault();\n        }\n\n        $event.stopPropagation();\n    }, []);\n\n    // handle events\n    const handleDragMove = React.useCallback(($event) => {\n        preventDefaultAndStopPropagation($event);\n        updateSliderPosition($event);\n    }, [updateSliderPosition, preventDefaultAndStopPropagation]);\n\n    const handleDragStart = ($event: SliderDragEvent) => {\n        preventDefaultAndStopPropagation($event);\n\n        if ($event.target === knobEndRef.current) {\n            initialTargetRef.current = knobEndRef.current;\n        } else {\n            initialTargetRef.current = knobStartRef.current;\n        }\n\n        updateSliderPosition($event);\n\n        document.addEventListener('mousemove', handleDragMove, false);\n        document.addEventListener('touchmove', handleDragMove, false);\n\n        document.addEventListener('mouseup', handleDragEnd, false);\n        document.addEventListener('touchend', handleDragEnd, false);\n    }\n\n    const handleDragEnd = React.useCallback(($event) => {\n        preventDefaultAndStopPropagation($event);\n\n        updateSliderPosition($event);\n        initialTargetRef.current = null;\n\n        document.removeEventListener('mousemove', handleDragMove, false);\n        document.removeEventListener('touchmove', handleDragMove, false);\n\n        setTimeout(() => {\n            document.removeEventListener('mouseup', handleDragEnd, false);\n            document.removeEventListener('touchend', handleDragEnd, false);\n        }, 0)\n    }, [preventDefaultAndStopPropagation, handleDragMove, updateSliderPosition]);\n\n    const handleKeyDown: React.KeyboardEventHandler = ($event: React.KeyboardEvent<HTMLSpanElement>) => {\n        preventDefaultAndStopPropagation($event);\n\n        let [newStartValue, newEndValue] = value;\n\n        if ($event.target === knobStartRef.current) {\n            let updatedStartValue;\n\n            switch ($event.key) {\n                case 'Home':\n                    newStartValue = min;\n                    break;\n                case 'PageUp':\n                    updatedStartValue = value[0] + (step * STEP_INCREMENT);\n\n                    if (updatedStartValue < value[1]) {\n                        newStartValue = updatedStartValue;\n                    } else {\n                        newStartValue = value[1] - step;\n                    }\n                    break;\n                case 'ArrowUp':\n                case 'ArrowRight':\n                    updatedStartValue = value[0] + step;\n\n                    if (updatedStartValue < value[1]) {\n                        newStartValue = updatedStartValue;\n                    } else {\n                        newStartValue = value[1] - step;\n                    }\n                    break;\n                case 'PageDown':\n                    updatedStartValue = value[0] - (step * STEP_INCREMENT);\n\n                    if (updatedStartValue > min) {\n                        newStartValue = updatedStartValue;\n                    } else {\n                        newStartValue = min;\n                    }\n                    break;\n                case 'ArrowDown':\n                case 'ArrowLeft':\n                    if (value[0] > min) {\n                        newStartValue = value[0] - step;\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        if ($event.target === knobEndRef.current) {\n            let updatedEndValue;\n\n            switch ($event.key) {\n                case 'Home':\n                    newEndValue = max;\n                    break;\n                case 'PageUp':\n                    updatedEndValue = value[1] + (step * STEP_INCREMENT);\n\n                    if (updatedEndValue < max) {\n                        newEndValue = updatedEndValue;\n                    } else {\n                        newEndValue = max;\n                    }\n                    break;\n                case 'ArrowUp':\n                case 'ArrowRight':\n                    if (value[1] < max) {\n                        newEndValue = value[1] + step;\n                    }\n                    break;\n                case 'PageDown':\n                    updatedEndValue = value[1] - (step * STEP_INCREMENT);\n\n                    if (updatedEndValue > value[0]) {\n                        newEndValue = updatedEndValue;\n                    } else {\n                        newEndValue = value[0] + step;\n                    }\n                    break;\n                case 'ArrowDown':\n                case 'ArrowLeft':\n                    updatedEndValue = value[1] - step;\n\n                    if (updatedEndValue > value[0]) {\n                        newEndValue = updatedEndValue;\n                    } else {\n                        newEndValue = value[0] + step;\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        setValue([clampValue(newStartValue, step), clampValue(newEndValue, step)]);\n    }\n\n    // clean up event listeners on component destroy (= componentWillUnmount)\n    React.useEffect(() => {\n        return () => {\n            document.removeEventListener('mousemove', handleDragMove, false);\n            document.removeEventListener('touchmove', handleDragMove, false);\n\n            document.removeEventListener('mouseup', handleDragEnd, false);\n            document.removeEventListener('touchend', handleDragEnd, false);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return (\n        <div\n            ref={sliderRef}\n            className={(props && props.disabled) ? \"slider disabled\" : \"slider\"}\n            onMouseDown={!(props && props.disabled) ? handleDragStart : undefined}\n            onTouchStart={!(props && props.disabled) ? handleDragStart : undefined}>\n            <span className=\"slider__rail\">\n                <span\n                    className=\"slider__track\"\n                    style={{\n                        left: getPercentFromValue(value[0]) + '%',\n                        width: getPercentFromValue(value[1] - value[0]) + '%'\n                    }}\n                />\n            </span>\n\n            {/* START KNOB */}\n            <input\n                type=\"hidden\"\n                disabled={props && props.disabled}\n                value={value[0]}\n            />\n            <span\n                ref={knobStartRef}\n                tabIndex={props && props.disabled ? undefined : 0}\n                role=\"slider\"\n                aria-labelledby={props && props.ariaLabelledBy}\n                aria-orientation=\"horizontal\"\n                aria-valuemax={max}\n                aria-valuemin={min}\n                aria-valuenow={value[0]}\n                onKeyDown={handleKeyDown}\n                style={{\n                    left: getPercentFromValue(value[0]) + '%'\n                }}\n                className=\"slider__knob\"\n            />\n            {/* START KNOB */}\n\n            {/* END KNOB */}\n            <input\n                type=\"hidden\"\n                disabled={props && props.disabled}\n                value={value[1]}\n            />\n            <span\n                ref={knobEndRef}\n                tabIndex={props && props.disabled ? undefined : 0}\n                role=\"slider\"\n                aria-labelledby={props && props.ariaLabelledBy}\n                aria-orientation=\"horizontal\"\n                aria-valuemax={max}\n                aria-valuemin={min}\n                aria-valuenow={value[1]}\n                onKeyDown={handleKeyDown}\n                style={{\n                    left: getPercentFromValue(value[1]) + '%'\n                }}\n                className=\"slider__knob\"\n            />\n            {/* END KNOB */}\n        </div>\n    );\n}\n\nexport default RangeSlider;\n","import RangeSlider from './RangeSlider';\n\nexport default RangeSlider;","import React from \"react\";\nimport { Slider, RangeSlider } from './components';\nimport \"./styles/app.css\";\nimport \"./styles/slider.css\";\n\nfunction App() {\n  const simpleDefaultValue = 0.1;\n  const [simpleValue, updateSimpleValue] = React.useState(simpleDefaultValue);\n\n  const [controlledValue, updateControlledValue] = React.useState(20);\n  const [rangeValue, updateRangeValue] = React.useState([0, 50]);\n\n  let disabledValue: number = 10;\n\n  return (\n    <article className=\"vk-slider-demo\">\n      <h1>vk-slider</h1>\n\n      <section className=\"vk-slider-demo__basics\">\n        <p>Код: <strong><a href=\"https://github.com/eugpoloz/vk-slider\" rel=\"noreferrer\" title=\"Репозиторий на github\" target=\"_blank\">github</a></strong></p>\n      </section>\n\n      <section className=\"vk-slider-demo__section\">\n        <h2>Простой слайдер (с дефолтным значением)</h2>\n\n        <div className=\"vk-slider-demo__information\">\n          <p>0.0001-1, шаг 0.0001</p>\n          <p>Дефолтное значение: <strong>{simpleDefaultValue}</strong></p>\n          <p>Текущее значение: <strong>{simpleValue}</strong></p>\n        </div>\n\n        <Slider\n          min={0.0001}\n          max={1}\n          step={0.0001}\n          defaultValue={simpleDefaultValue}\n          onChange={updateSimpleValue}\n          ariaLabelledBy=\"Простой слайдер\"\n        />\n      </section>\n\n      <section className=\"vk-slider-demo__section\">\n        <h2>Контролируемый слайдер</h2>\n\n        <div className=\"vk-slider-demo__information\">\n          <p>5-25, шаг 5</p>\n          <p>Значение: <strong>{controlledValue}</strong></p>\n        </div>\n\n        <Slider\n          min={5}\n          max={25}\n          step={5}\n          value={controlledValue}\n          onChange={updateControlledValue}\n          ariaLabelledBy=\"Контролируемый слайдер\"\n        />\n      </section>\n\n      <section className=\"vk-slider-demo__section\">\n        <h2>Выключенный слайдер</h2>\n\n        <div className=\"vk-slider-demo__information\">\n          <p>0-100, шаг 1</p>\n          <p>Значение: <strong>{disabledValue}</strong></p>\n        </div>\n\n        <Slider\n          min={0}\n          max={100}\n          step={10}\n          defaultValue={disabledValue}\n          disabled\n          ariaLabelledBy=\"Выключенный слайдер\"\n        />\n      </section>\n\n      <section className=\"vk-slider-demo__section\">\n        <h2>Range-слайдер</h2>\n\n        <div className=\"vk-slider-demo__information\">\n          <p>0-100, шаг 1</p>\n          <p>Значения: <strong>[{rangeValue[0]}, {rangeValue[1]}]</strong></p>\n        </div>\n\n        <RangeSlider\n          min={0}\n          max={100}\n          step={1}\n          value={rangeValue}\n          onChange={updateRangeValue}\n          ariaLabelledBy=\"Range-слайдер\"\n        />\n      </section>\n    </article>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}