{"version":3,"sources":["helpers/index.tsx","components/Slider/Slider.tsx","components/Slider/index.tsx","components/RangeSlider/RangeSlider.tsx","components/RangeSlider/index.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["STEP_INCREMENT","getClientXFromEvent","$event","$touchEvent","$mouseEvent","touches","clientX","validateAbsolutePosition","position","sliderWidth","min","max","step","validPosition","Math","absStep","round","getPercentFromAbsolutePosition","clampValue","value","number","precision","factor","pow","precisionRound","split","length","percentToValue","percent","valueToPercent","Slider","onChange","props","sliderRef","React","useRef","knobRef","useState","updateSliderWidth","sliderOffsetX","updateSliderOffsetX","updateSliderDimensions","useCallback","sliderDimensions","current","getBoundingClientRect","width","x","debounceUpdateSliderDimensions","debounce","useEffect","window","addEventListener","removeEventListener","initialValue","defaultValue","determineInitialValue","initialPercent","setValue","setPercent","active","toggleActive","updateSliderPosition","helperProps","percentPosition","validatePercent","preventDefaultAndStopPropagation","changedTouches","preventDefault","stopPropagation","handleDragMove","handleDragStart","document","body","classList","add","focus","handleDragEnd","remove","blur","setTimeout","ref","className","disabled","onMouseDown","undefined","onTouchStart","style","type","tabIndex","role","aria-labelledby","ariaLabelledBy","aria-orientation","aria-valuemax","aria-valuemin","aria-valuenow","onKeyDown","newValue","key","updatedIncrementedValue","updatedDecrementedValue","left","RangeSlider","knobStartRef","knobEndRef","getPercentFromValue","initialTargetRef","getPercentPosition","newStartValue","newEndValue","updatedStartValue","updatedEndValue","target","handleKeyDown","App","simpleValue","updateSimpleValue","controlledValue","updateControlledValue","rangeValue","updateRangeValue","href","rel","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e8a31593.chunk.js","sourcesContent":["export const DEBOUNCE_EVENT_TIMEOUT: number = 300;\nexport const STEP_INCREMENT: number = 10;\n\nexport function getClientXFromEvent(\n    $event: React.TouchEvent<HTMLElement> | React.MouseEvent<HTMLElement>\n) {\n    let $touchEvent = $event as React.TouchEvent<HTMLElement>;\n    let $mouseEvent = $event as React.MouseEvent<HTMLElement>;\n\n    if ($touchEvent?.touches?.[0]?.clientX) {\n        return $touchEvent.touches[0].clientX;\n    }\n\n    if ($mouseEvent?.clientX) {\n        return $mouseEvent.clientX;\n    }\n\n    return undefined;\n}\n\nexport type SliderHelperProps = {\n    min: number;\n    max: number;\n    step: number;\n    sliderWidth: number;\n};\nexport function validateAbsolutePosition(\n    position: number,\n    { sliderWidth, min, max, step }: SliderHelperProps\n) {\n    let validPosition = Math.max(0, Math.min(position, sliderWidth));\n\n    if (step > 0) {\n        const stepCount = (max - min) / step;\n        const absStep = sliderWidth / stepCount;\n\n        validPosition = Math.round(validPosition / absStep) * absStep;\n    }\n\n    return validPosition;\n}\n\nexport function validatePercent(percent: number): number {\n    return Math.max(0, Math.min(percent, 100));\n}\n\nexport function getPercentFromAbsolutePosition(\n    position: number,\n    sliderWidth: number\n) {\n    return (position * 100) / sliderWidth;\n}\n\nfunction precisionRound(number: number, precision: number) {\n    let factor = Math.pow(10, precision || 1);\n    return Math.round(number * factor) / factor;\n}\n\nexport function clampValue(value: number, step: number) {\n    if (step > 0) {\n        const stepFloatPart = `${step}`.split(\".\")[1] || \"\";\n        return precisionRound(value, stepFloatPart.length);\n    }\n\n    return value;\n}\n\ntype PercentToValueProps = { min: number; max: number; step: number };\nexport function percentToValue(\n    percent: number,\n    { min, max, step }: PercentToValueProps\n) {\n    const value = (percent * (max - min)) / 100 + min;\n\n    return clampValue(value, step);\n}\n\ntype ValueToPercentProps = { min: number; max: number };\nexport function valueToPercent(\n    value: number,\n    { min, max }: ValueToPercentProps\n) {\n    return ((value - min) * 100) / (max - min);\n}\n","import React from \"react\";\nimport {\n    getClientXFromEvent,\n    getPercentFromAbsolutePosition,\n    valueToPercent,\n    validateAbsolutePosition,\n    validatePercent,\n    percentToValue,\n    clampValue,\n    DEBOUNCE_EVENT_TIMEOUT,\n    STEP_INCREMENT,\n} from \"../../helpers\";\nimport debounce from \"lodash.debounce\";\n\ntype SliderDragEvent =\n    | React.TouchEvent<HTMLElement>\n    | React.MouseEvent<HTMLElement>;\n\ntype SliderProps = {\n    min: number;\n    max: number;\n    step?: number;\n    value?: number;\n    defaultValue?: number;\n    onChange?: Function;\n    disabled?: boolean;\n    ariaLabelledBy?: string;\n};\n\nfunction Slider({\n    min = 0,\n    max = 100,\n    step = 0.01,\n    onChange,\n    ...props\n}: SliderProps) {\n    // get refs\n    const sliderRef = React.useRef<HTMLDivElement>(null);\n    const knobRef = React.useRef<HTMLSpanElement>(null);\n\n    // measure slider\n    const [sliderWidth, updateSliderWidth] = React.useState<number>(0);\n    const [sliderOffsetX, updateSliderOffsetX] = React.useState<number>(0);\n\n    const updateSliderDimensions = React.useCallback(() => {\n        let sliderDimensions = sliderRef?.current?.getBoundingClientRect();\n\n        if (sliderDimensions) {\n            updateSliderWidth(sliderDimensions.width);\n            updateSliderOffsetX(sliderDimensions.x);\n        }\n    }, []);\n    const debounceUpdateSliderDimensions = debounce(\n        updateSliderDimensions,\n        DEBOUNCE_EVENT_TIMEOUT\n    );\n\n    React.useEffect(() => {\n        updateSliderDimensions();\n\n        window.addEventListener(\"resize\", debounceUpdateSliderDimensions);\n\n        return () => {\n            window.removeEventListener(\"resize\", debounceUpdateSliderDimensions);\n        };\n    }, [updateSliderDimensions, debounceUpdateSliderDimensions]);\n\n    // set values and percentages\n    const determineInitialValue = () => {\n        let initialValue = 0;\n\n        if (props.value) {\n            initialValue = props.value;\n        } else if (props.defaultValue) {\n            initialValue = props.defaultValue;\n        }\n\n        return initialValue;\n    };\n    const initialValue = determineInitialValue();\n    const initialPercent = valueToPercent(initialValue, { min, max });\n\n    const [value, setValue] = React.useState<number>(initialValue);\n    const [percent, setPercent] = React.useState<number>(initialPercent);\n    const [active, toggleActive] = React.useState<boolean>(false);\n\n    // handle onChange event on value changes\n    React.useEffect(() => {\n        if (!!onChange) {\n            onChange(value);\n        }\n    }, [value, onChange]);\n\n    // get and update slider position\n    const updateSliderPosition = React.useCallback(\n        ($event: SliderDragEvent) => {\n            const clientX = getClientXFromEvent($event);\n\n            if (clientX != null) {\n                let helperProps = {\n                    sliderWidth,\n                    min,\n                    max,\n                    step,\n                };\n\n                const absolutePosition = clientX - sliderOffsetX;\n                const validAbsolutePosition = validateAbsolutePosition(\n                    absolutePosition,\n                    helperProps\n                );\n                const percentPosition = getPercentFromAbsolutePosition(\n                    validAbsolutePosition,\n                    sliderWidth\n                );\n\n                setPercent(validatePercent(percentPosition));\n                setValue(percentToValue(percentPosition, helperProps));\n            }\n        },\n        [max, min, sliderOffsetX, sliderWidth, step]\n    );\n\n    const preventDefaultAndStopPropagation = React.useCallback(($event: any) => {\n        if (($event as React.TouchEvent<HTMLElement>).changedTouches?.length > 1) {\n            $event.preventDefault();\n        }\n\n        $event.stopPropagation();\n    }, []);\n\n    // handle events\n    const handleDragMove = React.useCallback(\n        ($event) => {\n            preventDefaultAndStopPropagation($event);\n            updateSliderPosition($event);\n        },\n        [updateSliderPosition, preventDefaultAndStopPropagation]\n    );\n\n    const handleDragStart = ($event: SliderDragEvent) => {\n        preventDefaultAndStopPropagation($event);\n\n        document.body?.classList.add('no-user-select');\n\n        knobRef.current?.focus();\n        toggleActive(true);\n        updateSliderPosition($event);\n\n        document.addEventListener(\"mousemove\", handleDragMove, false);\n        document.addEventListener(\"touchmove\", handleDragMove, false);\n\n        document.addEventListener(\"mouseup\", handleDragEnd, false);\n        document.addEventListener(\"touchend\", handleDragEnd, false);\n    };\n\n    const handleDragEnd = React.useCallback(\n        ($event) => {\n            preventDefaultAndStopPropagation($event);\n\n            document.body?.classList.remove('no-user-select');\n\n            updateSliderPosition($event);\n            toggleActive(false);\n            knobRef.current?.blur();\n\n            document.removeEventListener(\"mousemove\", handleDragMove, false);\n            document.removeEventListener(\"touchmove\", handleDragMove, false);\n\n            setTimeout(() => {\n                document.removeEventListener(\"mouseup\", handleDragEnd, false);\n                document.removeEventListener(\"touchend\", handleDragEnd, false);\n            }, 0);\n        },\n        [updateSliderPosition, preventDefaultAndStopPropagation, handleDragMove]\n    );\n\n    const handleKeyDown: React.KeyboardEventHandler = (\n        $event: React.KeyboardEvent<HTMLSpanElement>\n    ) => {\n        preventDefaultAndStopPropagation($event);\n\n        let newValue = value;\n\n        switch ($event.key) {\n            case \"Home\":\n                newValue = min;\n                break;\n            case \"End\":\n                newValue = max;\n                break;\n            case \"PageUp\":\n                let updatedIncrementedValue = value + step * STEP_INCREMENT;\n\n                if (updatedIncrementedValue < max) {\n                    newValue = updatedIncrementedValue;\n                } else {\n                    newValue = max;\n                }\n                break;\n            case \"ArrowUp\":\n            case \"ArrowRight\":\n                if (value < max) {\n                    newValue = value + step;\n                }\n                break;\n            case \"PageDown\":\n                let updatedDecrementedValue = value - step * STEP_INCREMENT;\n\n                if (updatedDecrementedValue > min) {\n                    newValue = updatedDecrementedValue;\n                } else {\n                    newValue = min;\n                }\n                break;\n            case \"ArrowDown\":\n            case \"ArrowLeft\":\n                if (value > min) {\n                    newValue = value - step;\n                }\n                break;\n            default:\n                break;\n        }\n\n        setValue(clampValue(newValue, step));\n        setPercent(valueToPercent(newValue, { min, max }));\n    };\n\n    // clean up event listeners on component destroy (= componentWillUnmount)\n    React.useEffect(() => {\n        return () => {\n            document.removeEventListener(\"mousemove\", handleDragMove, false);\n            document.removeEventListener(\"touchmove\", handleDragMove, false);\n\n            document.removeEventListener(\"mouseup\", handleDragEnd, false);\n            document.removeEventListener(\"touchend\", handleDragEnd, false);\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <div\n            ref={sliderRef}\n            className={props && props.disabled ? \"slider disabled\" : \"slider\"}\n            onMouseDown={!(props && props.disabled) ? handleDragStart : undefined}\n            onTouchStart={!(props && props.disabled) ? handleDragStart : undefined}\n        >\n            <span className=\"slider__rail\" />\n            <span\n                className=\"slider__track\"\n                style={{\n                    width: percent + \"%\",\n                }}\n            />\n            <input type=\"hidden\" disabled={props && props.disabled} value={value} />\n            <span\n                ref={knobRef}\n                tabIndex={props && props.disabled ? undefined : 0}\n                role=\"slider\"\n                aria-labelledby={props && props.ariaLabelledBy}\n                aria-orientation=\"horizontal\"\n                aria-valuemax={max}\n                aria-valuemin={min}\n                aria-valuenow={value}\n                onKeyDown={handleKeyDown}\n                style={{\n                    left: percent + \"%\",\n                }}\n                className={active ? \"slider__knob active\" : \"slider__knob\"}\n            />\n        </div>\n    );\n}\n\nexport default Slider;\n","import Slider from \"./Slider\";\n\nexport default Slider;\n","import React from \"react\";\nimport {\n    getClientXFromEvent,\n    getPercentFromAbsolutePosition,\n    valueToPercent,\n    validateAbsolutePosition,\n    percentToValue,\n    clampValue,\n    SliderHelperProps,\n    DEBOUNCE_EVENT_TIMEOUT,\n    STEP_INCREMENT,\n} from \"../../helpers\";\nimport debounce from \"lodash.debounce\";\n\ntype SliderDragEvent =\n    | React.TouchEvent<HTMLElement>\n    | React.MouseEvent<HTMLElement>;\n\ntype RangeSliderProps = {\n    min: number;\n    max: number;\n    step?: number;\n    value?: number[];\n    onChange?: Function;\n    disabled?: boolean;\n    ariaLabelledBy?: string;\n};\n\nfunction RangeSlider({\n    min = 0,\n    max = 100,\n    step = 0.01,\n    onChange,\n    ...props\n}: RangeSliderProps) {\n    // get refs\n    const sliderRef = React.useRef<HTMLDivElement>(null);\n    const knobStartRef = React.useRef<HTMLSpanElement>(null);\n    const knobEndRef = React.useRef<HTMLSpanElement>(null);\n\n    // measure slider\n    const [sliderWidth, updateSliderWidth] = React.useState<number>(0);\n    const [sliderOffsetX, updateSliderOffsetX] = React.useState<number>(0);\n\n    const updateSliderDimensions = React.useCallback(() => {\n        let sliderDimensions = sliderRef?.current?.getBoundingClientRect();\n\n        if (sliderDimensions) {\n            updateSliderWidth(sliderDimensions.width);\n            updateSliderOffsetX(sliderDimensions.x);\n        }\n    }, []);\n    const debounceUpdateSliderDimensions = debounce(\n        updateSliderDimensions,\n        DEBOUNCE_EVENT_TIMEOUT\n    );\n\n    React.useEffect(() => {\n        updateSliderDimensions();\n\n        window.addEventListener(\"resize\", debounceUpdateSliderDimensions);\n\n        return () => {\n            window.removeEventListener(\"resize\", debounceUpdateSliderDimensions);\n        };\n    }, [updateSliderDimensions, debounceUpdateSliderDimensions]);\n\n    // set values and percentages\n    const [value, setValue] = React.useState(\n        props?.value ? props.value : [min, max]\n    );\n    const getPercentFromValue = (value: number) =>\n        valueToPercent(value, { min, max });\n\n    // handle onChange event on value changes\n    React.useEffect(() => {\n        if (!!onChange) {\n            onChange(value);\n        }\n    }, [value, onChange]);\n\n    // get and update slider position\n    const initialTargetRef = React.useRef<HTMLSpanElement | null>(null);\n\n    const getPercentPosition = React.useCallback(\n        (clientX: number, helperProps: SliderHelperProps) => {\n            const absoluteX = validateAbsolutePosition(\n                clientX - sliderOffsetX,\n                helperProps\n            );\n            const percentX = getPercentFromAbsolutePosition(absoluteX, sliderWidth);\n\n            return percentX;\n        },\n        [sliderOffsetX, sliderWidth]\n    );\n\n    const updateSliderPosition = React.useCallback(\n        ($event: SliderDragEvent) => {\n            const clientX = getClientXFromEvent($event);\n\n            if (clientX != null) {\n                let helperProps = {\n                    sliderWidth,\n                    min,\n                    max,\n                    step,\n                };\n\n                let [newStartValue, newEndValue] = value;\n\n                const percentPosition = getPercentPosition(clientX, helperProps);\n\n                if (initialTargetRef.current === knobStartRef.current) {\n                    const updatedStartValue = percentToValue(\n                        percentPosition,\n                        helperProps\n                    );\n\n                    if (updatedStartValue < value[1]) {\n                        newStartValue = updatedStartValue;\n                    } else {\n                        newStartValue = value[1] - step;\n                    }\n                } else if (initialTargetRef.current === knobEndRef.current) {\n                    const updatedEndValue = percentToValue(percentPosition, helperProps);\n\n                    if (updatedEndValue > value[0]) {\n                        newEndValue = updatedEndValue;\n                    } else {\n                        newEndValue = value[0] + step;\n                    }\n                }\n\n                setValue([\n                    clampValue(newStartValue, step),\n                    clampValue(newEndValue, step),\n                ]);\n            }\n        },\n        [max, min, step, sliderWidth, value, getPercentPosition]\n    );\n\n    const preventDefaultAndStopPropagation = React.useCallback(($event: any) => {\n        if (($event as React.TouchEvent<HTMLElement>).changedTouches?.length > 1) {\n            $event.preventDefault();\n        }\n\n        $event.stopPropagation();\n    }, []);\n\n    // handle events\n    const handleDragMove = React.useCallback(\n        ($event) => {\n            preventDefaultAndStopPropagation($event);\n            updateSliderPosition($event);\n        },\n        [updateSliderPosition, preventDefaultAndStopPropagation]\n    );\n\n    const handleDragStart = ($event: SliderDragEvent) => {\n        preventDefaultAndStopPropagation($event);\n\n        if ($event.target === knobEndRef.current) {\n            initialTargetRef.current = knobEndRef.current;\n        } else {\n            initialTargetRef.current = knobStartRef.current;\n        }\n\n        updateSliderPosition($event);\n\n        document.addEventListener(\"mousemove\", handleDragMove, false);\n        document.addEventListener(\"touchmove\", handleDragMove, false);\n\n        document.addEventListener(\"mouseup\", handleDragEnd, false);\n        document.addEventListener(\"touchend\", handleDragEnd, false);\n    };\n\n    const handleDragEnd = React.useCallback(\n        ($event) => {\n            preventDefaultAndStopPropagation($event);\n\n            document.body?.classList.add('no-user-select');\n\n            updateSliderPosition($event);\n            initialTargetRef.current = null;\n\n            document.removeEventListener(\"mousemove\", handleDragMove, false);\n            document.removeEventListener(\"touchmove\", handleDragMove, false);\n\n            setTimeout(() => {\n                document.removeEventListener(\"mouseup\", handleDragEnd, false);\n                document.removeEventListener(\"touchend\", handleDragEnd, false);\n            }, 0);\n        },\n        [preventDefaultAndStopPropagation, handleDragMove, updateSliderPosition]\n    );\n\n    const handleKeyDown: React.KeyboardEventHandler = (\n        $event: React.KeyboardEvent<HTMLSpanElement>\n    ) => {\n        preventDefaultAndStopPropagation($event);\n\n        document.body?.classList.remove('no-user-select');\n\n        let [newStartValue, newEndValue] = value;\n\n        if ($event.target === knobStartRef.current) {\n            let updatedStartValue;\n\n            switch ($event.key) {\n                case \"Home\":\n                    newStartValue = min;\n                    break;\n                case \"PageUp\":\n                    updatedStartValue = value[0] + step * STEP_INCREMENT;\n\n                    if (updatedStartValue < value[1]) {\n                        newStartValue = updatedStartValue;\n                    } else {\n                        newStartValue = value[1] - step;\n                    }\n                    break;\n                case \"ArrowUp\":\n                case \"ArrowRight\":\n                    updatedStartValue = value[0] + step;\n\n                    if (updatedStartValue < value[1]) {\n                        newStartValue = updatedStartValue;\n                    } else {\n                        newStartValue = value[1] - step;\n                    }\n                    break;\n                case \"PageDown\":\n                    updatedStartValue = value[0] - step * STEP_INCREMENT;\n\n                    if (updatedStartValue > min) {\n                        newStartValue = updatedStartValue;\n                    } else {\n                        newStartValue = min;\n                    }\n                    break;\n                case \"ArrowDown\":\n                case \"ArrowLeft\":\n                    if (value[0] > min) {\n                        newStartValue = value[0] - step;\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        if ($event.target === knobEndRef.current) {\n            let updatedEndValue;\n\n            switch ($event.key) {\n                case \"Home\":\n                    newEndValue = max;\n                    break;\n                case \"PageUp\":\n                    updatedEndValue = value[1] + step * STEP_INCREMENT;\n\n                    if (updatedEndValue < max) {\n                        newEndValue = updatedEndValue;\n                    } else {\n                        newEndValue = max;\n                    }\n                    break;\n                case \"ArrowUp\":\n                case \"ArrowRight\":\n                    if (value[1] < max) {\n                        newEndValue = value[1] + step;\n                    }\n                    break;\n                case \"PageDown\":\n                    updatedEndValue = value[1] - step * STEP_INCREMENT;\n\n                    if (updatedEndValue > value[0]) {\n                        newEndValue = updatedEndValue;\n                    } else {\n                        newEndValue = value[0] + step;\n                    }\n                    break;\n                case \"ArrowDown\":\n                case \"ArrowLeft\":\n                    updatedEndValue = value[1] - step;\n\n                    if (updatedEndValue > value[0]) {\n                        newEndValue = updatedEndValue;\n                    } else {\n                        newEndValue = value[0] + step;\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        setValue([clampValue(newStartValue, step), clampValue(newEndValue, step)]);\n    };\n\n    // clean up event listeners on component destroy (= componentWillUnmount)\n    React.useEffect(() => {\n        return () => {\n            document.removeEventListener(\"mousemove\", handleDragMove, false);\n            document.removeEventListener(\"touchmove\", handleDragMove, false);\n\n            document.removeEventListener(\"mouseup\", handleDragEnd, false);\n            document.removeEventListener(\"touchend\", handleDragEnd, false);\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <div\n            ref={sliderRef}\n            className={props && props.disabled ? \"slider disabled\" : \"slider\"}\n            onMouseDown={!(props && props.disabled) ? handleDragStart : undefined}\n            onTouchStart={!(props && props.disabled) ? handleDragStart : undefined}\n        >\n            <span className=\"slider__rail\">\n                <span\n                    className=\"slider__track\"\n                    style={{\n                        left: getPercentFromValue(value[0]) + \"%\",\n                        width: getPercentFromValue(value[1] - value[0]) + \"%\",\n                    }}\n                />\n            </span>\n\n            {/* START KNOB */}\n            <input\n                type=\"hidden\"\n                disabled={props && props.disabled}\n                value={value[0]}\n            />\n            <span\n                ref={knobStartRef}\n                tabIndex={props && props.disabled ? undefined : 0}\n                role=\"slider\"\n                aria-labelledby={props && props.ariaLabelledBy}\n                aria-orientation=\"horizontal\"\n                aria-valuemax={max}\n                aria-valuemin={min}\n                aria-valuenow={value[0]}\n                onKeyDown={handleKeyDown}\n                style={{\n                    left: getPercentFromValue(value[0]) + \"%\",\n                }}\n                className=\"slider__knob\"\n            />\n            {/* START KNOB */}\n\n            {/* END KNOB */}\n            <input\n                type=\"hidden\"\n                disabled={props && props.disabled}\n                value={value[1]}\n            />\n            <span\n                ref={knobEndRef}\n                tabIndex={props && props.disabled ? undefined : 0}\n                role=\"slider\"\n                aria-labelledby={props && props.ariaLabelledBy}\n                aria-orientation=\"horizontal\"\n                aria-valuemax={max}\n                aria-valuemin={min}\n                aria-valuenow={value[1]}\n                onKeyDown={handleKeyDown}\n                style={{\n                    left: getPercentFromValue(value[1]) + \"%\",\n                }}\n                className=\"slider__knob\"\n            />\n            {/* END KNOB */}\n        </div>\n    );\n}\n\nexport default RangeSlider;\n","import RangeSlider from \"./RangeSlider\";\n\nexport default RangeSlider;\n","import React from \"react\";\nimport { Slider, RangeSlider } from \"./components\";\nimport \"./styles/app.css\";\nimport \"./styles/slider.css\";\n\nfunction App() {\n  const simpleDefaultValue = 0.1;\n  const [simpleValue, updateSimpleValue] = React.useState(simpleDefaultValue);\n\n  const [controlledValue, updateControlledValue] = React.useState(20);\n  const [rangeValue, updateRangeValue] = React.useState([0, 50]);\n\n  let disabledValue: number = 10;\n\n  return (\n    <article className=\"vk-slider-demo\">\n      <h1>vk-slider</h1>\n\n      <section className=\"vk-slider-demo__basics\">\n        <p>\n          Код:{\" \"}\n          <strong>\n            <a\n              href=\"https://github.com/eugpoloz/vk-slider\"\n              rel=\"noreferrer\"\n              title=\"Репозиторий на github\"\n              target=\"_blank\"\n            >\n              github\n            </a>\n          </strong>\n        </p>\n      </section>\n\n      <section className=\"vk-slider-demo__section\">\n        <h2>Простой слайдер (с дефолтным значением)</h2>\n\n        <div className=\"vk-slider-demo__information\">\n          <p>0.0001-1, шаг 0.0001</p>\n          <p>\n            Дефолтное значение: <strong>{simpleDefaultValue}</strong>\n          </p>\n          <p>\n            Текущее значение: <strong>{simpleValue}</strong>\n          </p>\n        </div>\n\n        <Slider\n          min={0.0001}\n          max={1}\n          step={0.0001}\n          defaultValue={simpleDefaultValue}\n          onChange={updateSimpleValue}\n          ariaLabelledBy=\"Простой слайдер\"\n        />\n      </section>\n\n      <section className=\"vk-slider-demo__section\">\n        <h2>Контролируемый слайдер</h2>\n\n        <div className=\"vk-slider-demo__information\">\n          <p>5-25, шаг 5</p>\n          <p>\n            Значение: <strong>{controlledValue}</strong>\n          </p>\n        </div>\n\n        <Slider\n          min={5}\n          max={25}\n          step={5}\n          value={controlledValue}\n          onChange={updateControlledValue}\n          ariaLabelledBy=\"Контролируемый слайдер\"\n        />\n      </section>\n\n      <section className=\"vk-slider-demo__section\">\n        <h2>Выключенный слайдер</h2>\n\n        <div className=\"vk-slider-demo__information\">\n          <p>0-100, шаг 1</p>\n          <p>\n            Значение: <strong>{disabledValue}</strong>\n          </p>\n        </div>\n\n        <Slider\n          min={0}\n          max={100}\n          step={10}\n          defaultValue={disabledValue}\n          disabled\n          ariaLabelledBy=\"Выключенный слайдер\"\n        />\n      </section>\n\n      <section className=\"vk-slider-demo__section\">\n        <h2>Range-слайдер</h2>\n\n        <div className=\"vk-slider-demo__information\">\n          <p>0-100, шаг 1</p>\n          <p>\n            Значения:{\" \"}\n            <strong>\n              [{rangeValue[0]}, {rangeValue[1]}]\n            </strong>\n          </p>\n        </div>\n\n        <RangeSlider\n          min={0}\n          max={100}\n          step={1}\n          value={rangeValue}\n          onChange={updateRangeValue}\n          ariaLabelledBy=\"Range-слайдер\"\n        />\n      </section>\n    </article>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}